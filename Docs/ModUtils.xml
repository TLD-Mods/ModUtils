<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ModUtils</name>
    </assembly>
    <members>
        <member name="T:ModUtils.Classes.GitHubFile">
            <summary>
            GitHubFile Definition
            </summary>
        </member>
        <member name="P:ModUtils.Classes.GitHubFile.Name">
            <summary>
            Used solely for debugging output
            </summary>
        </member>
        <member name="P:ModUtils.Classes.GitHubFile.RemotePath">
            <summary>
            Full RAW github path
            </summary>
        </member>
        <member name="P:ModUtils.Classes.GitHubFile.LocalPath">
            <summary>
            Local path, relative to \Mods\ folder
            </summary>
        </member>
        <member name="P:ModUtils.Classes.GitHubFile.UpdatePolicy">
            <summary>
            When to update the local from remote
            Default : Changed
            </summary>
        </member>
        <member name="P:ModUtils.Classes.GitHubFile.Updated">
            <summary>
            Returns true if the file updated
            </summary>
        </member>
        <member name="P:ModUtils.Classes.GitHubFile.Valid">
            <summary>
            Returns true if the supplied information is valid
            </summary>
        </member>
        <member name="M:ModUtils.Classes.GitHubFile.#ctor(System.String,System.String,System.String,ModUtils.Classes.UpdatePolicy)">
            <summary>
            <b>(string) name</b><br /><i>Used solely for debugging output</i><br /><br />
            <b>(string) remotePath</b><br /><i>Full RAW github path</i><br /><br />
            <b>(string) localPath</b><br /><i>Local path, relative to \Mods\ folder</i><br /><br />
            <b>(UpdatePolicy) updatePolicy</b><br /><i>When to update the local file from remote (Default: Changed)</i>
            </summary>
            <param name="name"></param>
            <param name="remotePath"></param>
            <param name="localPath"></param>
            <param name="updatePolicy"></param>
        </member>
        <member name="M:ModUtils.Extensions.AssemblyExtensions.GetResource(System.Reflection.Assembly,System.String)">
            <summary>
            Returns the embedded resource content as a string
            </summary>
            <param name="asm"></param>
            <param name="resourceName"></param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:ModUtils.Extensions.AssemblyExtensions.GetAssetBundle(System.Reflection.Assembly,System.String)">
            <summary>
            Returns an embedded AssetBundle with the matching name
            </summary>
            <param name="asm"></param>
            <param name="bundleName"></param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:ModUtils.Extensions.GameObjectExtensions.HasComponent``1(UnityEngine.GameObject,System.Boolean,System.Boolean)">
            <summary>
            Checks if the GameObject has a component of type T
            </summary>
            <typeparam name="T"></typeparam>
            <param name="go"></param>
            <param name="checkChildren">(optional [bool])</param>
            <param name="checkParent">(optional [bool])</param>
            <returns>bool true|false</returns>
        </member>
        <member name="M:ModUtils.Extensions.GameObjectExtensions.IsGearItem(UnityEngine.GameObject)">
            <summary>
            Shorthand for HasComponent GearItem
            </summary>
            <param name="go"></param>
            <returns></returns>
        </member>
        <member name="M:ModUtils.Extensions.GameObjectExtensions.IsFoodItem(UnityEngine.GameObject)">
            <summary>
            Shorthand for HasComponent&lt;FoodItem&gt;
            </summary>
            <param name="go"></param>
            <returns></returns>
        </member>
        <member name="M:ModUtils.Extensions.GameObjectExtensions.IsToolsItem(UnityEngine.GameObject)">
            <summary>
            Shorthand for HasComponent&lt;ToolsItem&gt;
            </summary>
            <param name="go"></param>
            <returns></returns>
        </member>
        <member name="M:ModUtils.Extensions.GameObjectExtensions.IsStoneItem(UnityEngine.GameObject)">
            <summary>
            Shorthand for HasComponent&lt;StoneItem&gt;
            </summary>
            <param name="go"></param>
            <returns></returns>
        </member>
        <member name="M:ModUtils.Extensions.GameObjectExtensions.IsFuelSource(UnityEngine.GameObject)">
            <summary>
            Shorthand for HasComponent&lt;FuelSourceItem&gt;
            </summary>
            <param name="go"></param>
            <returns></returns>
        </member>
        <member name="M:ModUtils.Extensions.GameObjectExtensions.IsCookable(UnityEngine.GameObject)">
            <summary>
            Shorthand for HasComponent&lt;Cookable&gt;
            </summary>
            <param name="go"></param>
            <returns></returns>
        </member>
        <member name="M:ModUtils.Extensions.GameObjectExtensions.IsHarvestable(UnityEngine.GameObject)">
            <summary>
            Shorthand for HasComponent&lt;Harvestable&gt;
            </summary>
            <param name="go"></param>
            <returns></returns>
        </member>
        <member name="M:ModUtils.Extensions.GameObjectExtensions.IsBodyHarvest(UnityEngine.GameObject)">
            <summary>
            Shorthand for HasComponent&lt;BodyHarvest&gt;
            </summary>
            <param name="go"></param>
            <returns></returns>
        </member>
        <member name="M:ModUtils.Extensions.GameObjectExtensions.IsContainer(UnityEngine.GameObject)">
            <summary>
            Shorthand for HasComponent&lt;Container&gt;
            </summary>
            <param name="go"></param>
            <returns></returns>
        </member>
        <member name="M:ModUtils.Extensions.GameObjectExtensions.IsFlareItem(UnityEngine.GameObject)">
            <summary>
            Shorthand for HasComponent&lt;FlareItem&gt;
            </summary>
            <param name="go"></param>
            <returns></returns>
        </member>
        <member name="M:ModUtils.Extensions.GameObjectExtensions.IsTorchItem(UnityEngine.GameObject)">
            <summary>
            Shorthand for HasComponent&lt;TorchItem&gt;
            </summary>
            <param name="go"></param>
            <returns></returns>
        </member>
        <member name="M:ModUtils.Extensions.GameObjectExtensions.IsFirstAidItem(UnityEngine.GameObject)">
            <summary>
            Shorthand for HasComponent&lt;FirstAidItem&gt;
            </summary>
            <param name="go"></param>
            <returns></returns>
        </member>
        <member name="M:ModUtils.Extensions.GameObjectExtensions.IsLiquidItem(UnityEngine.GameObject)">
            <summary>
            Shorthand for HasComponent&lt;LiquidItem&gt;
            </summary>
            <param name="go"></param>
            <returns></returns>
        </member>
        <member name="M:ModUtils.Extensions.GameObjectExtensions.IsRopeItem(UnityEngine.GameObject)">
            <summary>
            Shorthand for HasComponent&lt;RopeItem&gt;
            </summary>
            <param name="go"></param>
            <returns></returns>
        </member>
        <member name="M:ModUtils.Extensions.GameObjectExtensions.IsResearchItem(UnityEngine.GameObject)">
            <summary>
            Shorthand for HasComponent&lt;ResearchItem&gt;
            </summary>
            <param name="go"></param>
            <returns></returns>
        </member>
        <member name="M:ModUtils.Extensions.GameObjectExtensions.IsBed(UnityEngine.GameObject)">
            <summary>
            Shorthand for HasComponent&lt;Bed&gt;
            </summary>
            <param name="go"></param>
            <returns></returns>
        </member>
        <member name="T:ModUtils.Console">
            <summary>
            Console Commands<para />
            mu_test<para />
            mu_timeofday_lock<br />
            mu_timeofday_unlock<br />
            </summary>
        </member>
        <member name="T:ModUtils.Github">
            <summary>
            GitHub Utilities
            </summary>
        </member>
        <member name="M:ModUtils.Github.SyncFile(System.String,System.String,System.String,ModUtils.Classes.UpdatePolicy)">
            <summary>
            <b>(string) name</b><br /><i>Used solely for debugging output</i><br /><br />
            <b>(string) remotePath</b><br /><i>Full RAW github path</i><br /><br />
            <b>(string) localPath</b><br /><i>Local path, relative to \Mods\ folder</i><br /><br />
            <b>(UpdatePolicy) updatePolicy</b><br /><i>When to update the local file from remote (Default: Changed)</i>
            </summary>
            <param name="name"></param>
            <param name="remotePath"></param>
            <param name="localPath"></param>
            <param name="updatePolicy"></param>
        </member>
        <member name="T:ModUtils.Mod">
            <summary>
            Mod/Assembly Utilities
            </summary>
        </member>
        <member name="M:ModUtils.Mod.IsLoaded(System.String,System.Boolean)">
            <summary>
            Check if a mod is loaded
            </summary>
            <param name="modName">The Mod/Assembly name</param>
            <param name="partialSearch">(optional [bool])</param>
            <returns></returns>
        </member>
        <member name="T:ModUtils.Player">
            <summary>
            Player Utilities
            </summary>
        </member>
        <member name="M:ModUtils.Player.Object">
            <summary>
            Get the Player Object
            </summary>
            <returns></returns>
        </member>
        <member name="M:ModUtils.Player.Position">
            <summary>
            Get the Player Position
            </summary>
            <returns></returns>
        </member>
        <member name="T:ModUtils.SaveGame">
            <summary>
            Save Game Utilities
            </summary>
        </member>
        <member name="T:ModUtils.Scene">
            <summary>
            Scene Utilities
            </summary>
        </member>
        <member name="M:ModUtils.Scene.Name">
            <summary>
            Get active scene name
            </summary>
            <returns></returns>
        </member>
        <member name="M:ModUtils.Scene.InstanceName">
            <summary>
            Get the instance name of the scene<para />
            (useful for instanced scenes like cabins or trailers)
            </summary>
            <returns></returns>
        </member>
        <member name="M:ModUtils.Scene.IsInstance">
            <summary>
            Chekc if the current scene is an instance<para />
            (Cabin or Trailer)
            </summary>
            <returns></returns>
        </member>
        <member name="M:ModUtils.Scene.IsGameScene(System.String)">
            <summary>
            Check if the scene is a game scene<para />
            (not Empty,Boot,Menu)
            </summary>
            <param name="sceneName">If left null Scene.Name() will be used</param>
            <returns></returns>
        </member>
        <member name="M:ModUtils.Scene.IsPrimaryScene(System.String)">
            <summary>
            NOT WORKING!! Check if the scene is the primary scene of the SceneSet<para />
            (not _SANDBOX,_DLC01)
            </summary>
            <param name="sceneName">If left null Scene.Name() will be used</param>
            <returns></returns>
        </member>
        <member name="M:ModUtils.Scene.GetActiveSceneSet">
            <summary>
            Gets the current active SceneSet
            </summary>
            <returns></returns>
        </member>
        <member name="M:ModUtils.Scene.GetActiveSceneSetBaseScene">
            <summary>
            NOT WORKING!! Gets the base scene name from the current active SceneSet
            </summary>
            <returns></returns>
        </member>
        <member name="M:ModUtils.Scene.IsFirstLoad">
            <summary>
            Check if this is the first time the scene was loaded
            </summary>
            <returns></returns>
        </member>
        <member name="M:ModUtils.Scene.IsIndoors">
            <summary>
            Is the current scene Indoors
            </summary>
            <returns></returns>
        </member>
        <member name="M:ModUtils.Scene.IsOutdoors">
            <summary>
            Is the current scene Outdoors
            </summary>
            <returns></returns>
        </member>
        <member name="T:ModUtils.TimeOfDay">
            <summary>
            Time of Day Utilities
            </summary>
        </member>
    </members>
</doc>
